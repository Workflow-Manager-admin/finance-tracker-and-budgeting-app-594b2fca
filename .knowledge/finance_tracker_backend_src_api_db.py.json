{"is_source_file": true, "format": "Python", "description": "This Python source file sets up database connectivity, session management, and ORM base for the finance tracker backend. It includes configuration for SQLite and other databases, and provides utility functions for testing the database connection and dependency injection of database sessions, primarily used in a FastAPI application.", "external_files": ["os", "sqlalchemy", "sqlalchemy.ext.declarative", "sqlalchemy.orm", "typing"], "external_methods": ["sqlalchemy.create_engine", "sqlalchemy.ext.declarative.declarative_base", "sqlalchemy.orm.sessionmaker", "sqlalchemy.exc.OperationalError", "os.path.isfile", "os.access"], "published": ["SQLALCHEMY_DATABASE_URL", "engine", "SessionLocal", "Base", "get_db", "test_db_connection"], "classes": [], "methods": [{"name": "test_db_connection()", "description": "Tests the database connection. For SQLite, checks file existence and write permissions. For other databases, attempts a simple query to verify connectivity.", "scope": "", "scopeKind": ""}, {"name": "Generator get_db()", "description": "Provides a SQLAlchemy session as a dependency (e.g., for FastAPI routes), ensuring proper session cleanup.", "scope": "", "scopeKind": ""}], "calls": ["os.environ.get", "create_engine", "sessionmaker", "declarative_base", "os.path.isfile", "os.access", "engine.connect", "conn.execute"], "search-terms": ["SQLAlchemy setup", "database connection", "session management", "FastAPI dependency", "SQLite configuration"], "state": 2, "file_id": 11, "knowledge_revision": 47, "git_revision": "735aa60096f93d92870341101f80ce9fd32ffada", "revision_history": [{"24": ""}, {"45": "d538fbe1839910a0271a05534979a17edf47f8a8"}, {"46": "d538fbe1839910a0271a05534979a17edf47f8a8"}, {"47": "735aa60096f93d92870341101f80ce9fd32ffada"}], "ctags": [{"_type": "tag", "name": "Base", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^Base = declarative_base()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SQLALCHEMY_DATABASE_URL", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^SQLALCHEMY_DATABASE_URL = os.environ.get(\"DB_CONNECTION_STRING\", \"sqlite:\\/\\/\\/.\\/finance_tracke/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SessionLocal", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "engine", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^    engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^def get_db() -> Generator:$/", "language": "Python", "typeref": "typename:Generator", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "test_db_connection", "path": "/home/kavia/workspace/code-generation/finance-tracker-and-budgeting-app-594b2fca/finance_tracker_backend/src/api/db.py", "pattern": "/^def test_db_connection():$/", "language": "Python", "kind": "function", "signature": "()"}], "hash": "b961581878bd3f06538ee75f3c8ae71d", "format-version": 4, "code-base-name": "finance_tracker_backend", "filename": "finance_tracker_backend/src/api/db.py", "fields": [{"name": "Base = declarative_base()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SQLALCHEMY_DATABASE_URL = os.environ.get(\"DB_CONNECTION_STRING\", \"sqlite:\\/\\/\\/.\\/finance_tracke/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})", "scope": "", "scopeKind": "", "description": "unavailable"}]}